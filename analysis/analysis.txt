Ana Martinez
apm36
Question 1: are the benchmark timings for StringStrand consistent with the explanation below that the time to execute cutAndSplice is O(b2S)? 
Yes, the runtimes match this efficiency, and it is the slowest because it uses inefficient methods to change the strings.
Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method cutAndSplice -- see the code. This means that b2 will be constant in the benchmark, but S will vary. 



dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.515	1290
StringStrand:	            512	      4,965,591	0.524	1290
StringStrand:	          1,024	      5,295,831	0.514	1290
StringStrand:	          2,048	      5,956,311	0.691	1290
StringStrand:	          4,096	      7,277,271	0.950	1290
StringStrand:	          8,192	      9,919,191	1.250	1290
StringStrand:	         16,384	     15,203,031	2.383	1290
StringStrand:	         32,768	     25,770,711	4.204	1290
StringStrand:	         65,536	     46,906,071	8.113	1290
StringStrand:	        131,072	     89,176,791	15.075	1290
StringStrand:	        262,144	    173,718,231	30.265	1290
StringStrand:	        524,288	    342,801,111	59.822	1290
StringStrand:	      1,048,576	    680,966,871	109.616	1290
StringStrand:	      2,097,152	  1,357,298,391	211.707	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:37)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)







Question 2: are the benchmark timings for StringBuilderStrand consistent with the explanation below that the time to execute cutAndSplice is O(bS)? 
Yes, the runtimes are about the O(bs) efficiency, which is faster than the StringStrand because of the use of StringBuilder, which can be used to change strings.
Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method cutAndSplice -- see the code. This means that b will be constant in the benchmark, but S will vary. 
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.024	1290
StringBuilderStrand:	            512	      4,965,591	0.016	1290
StringBuilderStrand:	          1,024	      5,295,831	0.008	1290
StringBuilderStrand:	          2,048	      5,956,311	0.008	1290
StringBuilderStrand:	          4,096	      7,277,271	0.009	1290
StringBuilderStrand:	          8,192	      9,919,191	0.010	1290
StringBuilderStrand:	         16,384	     15,203,031	0.015	1290
StringBuilderStrand:	         32,768	     25,770,711	0.028	1290
StringBuilderStrand:	         65,536	     46,906,071	0.038	1290
StringBuilderStrand:	        131,072	     89,176,791	0.093	1290
StringBuilderStrand:	        262,144	    173,718,231	0.128	1290
StringBuilderStrand:	        524,288	    342,801,111	0.277	1290
StringBuilderStrand:	      1,048,576	    680,966,871	0.480	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.append(Unknown Source)
	at java.base/java.lang.StringBuilder.append(Unknown Source)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)



Question 3: Explain why the time for LinkStrand does not change much at all over all the runs in the benchmark program. Explain why you think memory is exhausted at the specific strand size you see in your timings -- as compared to exhaustion for String and StringBuilder.

The efficiency is not dependent on the size of the splicee, so the runtime depends on appends which is constant.
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.027	1290
LinkStrand:	            512	      4,965,591	0.015	1290
LinkStrand:	          1,024	      5,295,831	0.005	1290
LinkStrand:	          2,048	      5,956,311	0.003	1290
LinkStrand:	          4,096	      7,277,271	0.004	1290
LinkStrand:	          8,192	      9,919,191	0.004	1290
LinkStrand:	         16,384	     15,203,031	0.004	1290
LinkStrand:	         32,768	     25,770,711	0.007	1290
LinkStrand:	         65,536	     46,906,071	0.004	1290
LinkStrand:	        131,072	     89,176,791	0.005	1290
LinkStrand:	        262,144	    173,718,231	0.005	1290
LinkStrand:	        524,288	    342,801,111	0.004	1290
LinkStrand:	      1,048,576	    680,966,871	0.005	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.006	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.004	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.005	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.005	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.007	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.004	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.005	1290
LinkStrand:	    268,435,456	173,145,504,471	0.007	1290
LinkStrand:	    536,870,912	346,286,373,591	0.005	1290
LinkStrand:	  1,073,741,824	692,568,111,831	0.008	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.append(Unknown Source)
	at java.base/java.lang.StringBuilder.append(Unknown Source)
	at DNABenchmark.main(DNABenchmark.java:110)